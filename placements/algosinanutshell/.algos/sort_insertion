***** insertion sort *****
context: few eles, eles already sorted
forces: trivial to implement, no nested loops, only needs enough data for a single ele
consequences: best when mostly sorted. very bad when lots to sort
analysis: better when lots of duplicates, essentially lower swaps to do = better, inefficient on value based data due to cost of shifting data
best: O(n)
avg: O(n^2)
worst: O(n^2)
related: array

sort (A)
	for i = 1 to n - 1 do
		insert(A, i, A[i])

insert (A, pos, value)
	i = pos - 1
	while (i >= 0 && A[i] > value)
		A[i + 1] = A[i]
		i--
	A[i + 1] = value
